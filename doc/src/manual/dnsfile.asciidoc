= dnsfile
Lauri Moisio <l@arv.io>
Version 0.0.2, 2019.02.02
:ext-relative: {outfilesuffix}

== Module

dnsfile - Handle DNS master files

== Description

This module allows DNS master files to be read and created.

[[encoding]]
=== File encoding

Back when the original DNS specification was drafted, a strict byte-to-character relationship/mapping was not an unreasonable assumption. Since then the Unicode standard -- and the various encodings for representing Unicode characters -- has done away with this simplicity. This introduces a few new considerations into DNS master files, some simpler that others.

==== Non-ASCII whitespace

Only space and tab are considered whitespace in master files.

For distinguishing lines, dnslib relies on `io:get_line/2` of the standard library.

==== Non-ASCII in tokens

[source]
arv.io.    IN    60    あ 0.0.0.0

あ will never match any resource record type, thus using non-ASCII text is no problem. Likewise if it were used in place of a class, or as the address.

==== Non-ASCII in domains

IMPORTANT: *Don't do it*.

Although domains are technically just arrays of arrays of octets, and thus capable of representing non-ASCII characters, for example in UTF-8, a number of requirements complicate the situation. For one, the original DNS specification adopted a number of previous guidelines on what a domain could and could not consist of. Thus existing systems might enforce these older restrictions on domains. This inertia, combined with the complicated nature of character casing and normalization in Unicode, makes it impractical to update the DNS specification to allow, for example, UTF-8 representations of non-ASCII characters in domains.

The adopted solution was to create a system for representing non-ASCII characters while still adhering to the previously laid out rules. link:https://www.ietf.org/rfc/rfc3492.txt[RFC3492] describes this technical solution. The subject of non-ASCII in domain names -- internationalized domain names (IDNA) -- is, however, too complicated to go into detail here.

dnslib *does not* currently properly support non-ASCII characters in domains, so they should not be used.

==== Non-ASCII text in resource data

A number of resource records have text -- an array of octets -- as their data, `TXT` type being the most obvious one. When the DNS specification was drafted, the raw bytes read from the file could be used as-is as the data of such resource records. But what are we to do now, when text can have any of a number of on-disk representations?

dnslib takes the position that non-ASCII characters in text, unless an option explicitly specifies otherwise, are passed along in UTF-8 encoding. Ie. regardless of on-disk format, text is transformed to UTF-8 encoding when it is used as text -- as opposed to a token -- in resource records. This is based on the octet-nature of DNS and DNS text, a use-case similar to others which assume text to consist of single octet units, combined with the broad acceptance and support for UTF-8 as the standard encoding of text data.

.Exception

[source]
.    IN    60    TXT  "\255\254\253"

In this example, the octets `255`, `254`, `253` are passed to the resource record as they are.

=== Master file syntax

==== Directives

Directives allow certain oft-repeated parts of DNS master files to be specified only once and omitted from then on. This makes master files easier to write, understand and debug.

`$ORIGIN` sets the domain which will be appended to relative domains. Has to be an absolute domain.

[source]
$ORIGIN arv.io.

`$TTL` sets the time-to-live (TTL) value which will be used for entries without an explicit ttl.

[source]
$TTL 60

`$INCLUDE` combines another zone file into the current one. Path is relative to the directory of the current file. Optionally a new origin domain can be specified.

[source]
$INCLUDE "other.zone"
$INCLUDE "other.zone" neworigin
$INCLUDE "other.zone" neworigin.arv.io.

==== Time-To-Live (TTL) field

Ttl fields can use the syntax accepted by link:dnslib.list_to_ttl{ext-relative}[`dnslib:list_to_ttl`].

== Exports

Read files:

* link:dnsfile.consult{ext-relative}[dnsfile:consult] - Read resource records from a file
* link:dnsfile.foldl{ext-relative}[dnsfile:foldl] - Call a function on successive resources retrieved from a master file
* link:dnsfile.is_valid{ext-relative}[dnsfile:is_valid] - Verify master file syntax and contents
* link:dnsfile.iterate_begin{ext-relative}[dnsfile:iterate_begin] - Begin master file iteration
* link:dnsfile.iterate_end{ext-relative}[dnsfile:iterate_end] - End master file iteration
* link:dnsfile.iterate_next{ext-relative}[dnsfile:iterate_next] - Get next resource from an iterated master file

Write files:

* link:dnsfile.write_resources{ext-relative}[dnsfile:write_resources] - Write resource records to a file

Misc:

* link:dnsfile.parse_resource{ext-relative}[dnsfile:parse_resource] - Parse string as a resource

== Examples

Basic DNS syntax example. Each of the following non-comment, non-empty lines represents the same resource.

[source]
----
; This is a comment

arv.io.    IN    30min    A  0.0.0.0

$ORIGIN arv.io.
@          IN    30min    A  0.0.0.0  ; @ is replaced by the current origin
@                30min    A  0.0.0.0  ; Only the first resource has to have a class (IN, in this case)
                 30min    A  0.0.0.0  ; If no domain is specified, the previous one is used

$TTL 30min
                          A  0.0.0.0  ; With $TTL it is possible to set a default ttl value

$ORIGIN io.
arv                       A  0.0.0.0  ; origin is appended to relative domains
----

== Changelog

* *0.0.2*
** New function `foldl/3,4` added
** New function `is_valid/1,2` added
** New functions `iterate_begin/1,2`, `iterate_next/1` and `iterate_end/1` added
* *0.0.0* Module added

== See also

link:index{ext-relative}[Index]
