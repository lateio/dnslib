= dnszone:is_valid
Lauri Moisio <l@arv.io>
Version 0.0.2, 2019.04.10
:ext-relative: {outfilesuffix}

== Name

dnszone:is_valid - Check if resource records form a valid zone

== Description

[source,erlang]
----
is_valid(Resources :: [dnslib:resource()]) ->
      'true'
    | {'false',
          'missing_soa'
        | {'multiple_soas', Soas :: [dnslib:domain()]}
        | 'wildcard_soa'
        | {'missing_glue', dnslib:domain()}
        | {'other_than_glue_past_edges', dnslib:domain()}
        | {'not_under_soa', dnslib:domain()}
        | {'non_exclusive_cname', dnslib:domain()}
        | {'cname_to_cname_loop', dnslib:domain()}
        | {'cname_loop', dnslib:domain()}.
      }.
----

Check if resource records form a valid zone.

== Arguments

Resources::

Resources to rummage through

== Return value

If `Resources` represent a valid zone, `'true'` is returned.

On error a tuple consisting of `'false'` and the error reason is returned.

== Errors

`'missing_soa'`::

There was no `SOA` record among `Resources`.

`{'multiple_soas', Soas $$::$$ [dnslib:domain()]}`::

There were multiple `SOA` records among `Resources`. `Soas` contains the domain names for additional `SOA` records.

`'wildcard_soa'`::

The `SOA` record has a wildcard domain.

`{missing_glue, Domain $$::$$ dnslib:domain()}`::

`Resources` did not contain glue address record(s) for records past `NS` records. `Domain` is the domain for the record missing glue records.

`{'other_than_glue_past_edges', Domain $$::$$ dnslib:domain()}`::

There were resources other than address records past `NS` records. `Domain` is the domain from the problem record.

`{not_under_soa, Domain $$::$$ dnslib:domain()}`::

A record was not under the `SOA`. `Domain` is the domain of the problem record.

`{'non_exclusive_cname', Domain $$::$$ dnslib:domain()}`::

For some domain, there were both a `CNAME` record and additionally a record of some other type. `Domain` is the domain of the problem record.

`{'cname_to_cname_loop', Domain $$::$$ dnslib:domain()}`::

There was an anomalous `CNAME` record `{Domain, _, _, _, Domain}` in `Resources`.

`{'cname_loop', Domain $$::$$ dnslib:domain()}`::

There was a `CNAME` loop in `Resources`. `Domain` is the starting point of the loop.

== Changelog

* *0.0.2* Renamed from `valid/1` to `is_valid/1`
* *0.0.1* `cname_loop` error added
* *0.0.0* Function added

== See also

link:dnszone.is_valid_file{ext-relative}[dnszone:is_valid_file],
link:dnszone{ext-relative}[dnszone]
