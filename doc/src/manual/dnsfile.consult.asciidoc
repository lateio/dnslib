= dnsfile:consult
Lauri Moisio <l@arv.io>
Version 0.0.1, 2019.01.18
:ext-relative: {outfilesuffix}

== Name

dnsfile:consult - Read resource records from a file

== Description

[source,erlang]
----
-type read_file_error_type() ::
      'syntax_error'
    | 'directive_error'
    | 'resource_record_error'.

consult(Path :: string())
    -> consult(Path, []).

consult(Path :: string(), Opts :: [read_file_opt()])
    -> {'ok', [dnslib:resource()]}
     | {'error'
           {'file_error', 'eacces' | 'enoent' | 'eisdir', Filename :: string()}
         | {
             read_file_error_type(),
             Filename :: string(),
             Line :: pos_integer(),
             Reason :: term()
           }
       }.
----

Read resource records from a file. Analogous to `file:consult/1`.

== Types

=== read_file_opt()

See link:dnsfile.read_file{ext-relative}[`dnsfile:read_file/1,2`] for details

== Arguments

Path::

Path of the master file

Opts::

Options to control certain aspects of master file handling

== Return value

On success a tuple consisting of `'ok'` atom and a list of retrieved resources is returned. Resources are in the same order as they appeared in the file.

On error a tuple consisting of `'error'` atom and the error reason is returned.

== Errors

`{'file_error', Reason, Filename $$::$$ string()}`::

`'file_error'` indicates problems with accessing the file -- insufficient permissions, file not actually existing, etc.

`{read_file_error_type(), File $$::$$ string(), Line $$::$$ pos_integer(), Reason $$::$$ term()}`::

This case covers a wide variety problems regarding file contents. In effort to be helpful, `File` and `Line`  are included to help guide debugging. `Reason` terms try to be informative.

== Notes

Currently `consult` will not allow multiple classes to be present in a single master file.

== Examples

[source,erlang]
----
{ok, [Resource]} = dnsfile:consult("/BleepBloop/treasures"),
{[<<"arv">>,<<"io">>], a, in, 60, {127,0,0,1}} = Resource.
----

== Changelog

* *0.0.2* `consult/1,2` is now based on `dnsfile:read_file/1,2`
* *0.0.1*
** A better sense of how to handle text encodings
** Can now handle unknown types and classes as per link:https://tools.ietf.org/rfc/rfc3597.txt[RFC3597]
** Options
*** Added `'class'`
*** Added `'domain'`
*** Added `'origin'`
*** Added `'ttl'`
*** Added `'max_line_length'`
*** Added `'allow_unknown_resources'`
*** Added `'allow_unknown_classes'`
*** Added `'encoding'`
*** Added `'text_encoding'`
*** All type blacklist handling combined under single `'type_blacklist'` option
*** Renamed `'linebreak'` to `'line_break'`
* *0.0.0* Function added

== See also

link:dnsfile.read_file{ext-relative}[dnsfile:read_file],
link:dnsfile.write_resources{ext-relative}[dnsfile:write_resources],
link:dnsfile{ext-relative}[dnsfile]
