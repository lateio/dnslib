= dnswire:from_binary
Lauri Moisio <l@arv.io>
Version 0.0.2, 2019.02.15
:ext-relative: {outfilesuffix}

== Name

dnswire:from_binary - Parse message from wire format

== Description

[source,erlang]
----
from_binary(Bin :: binary()) -> from_binary(Msg, []).

from_binary(Bin :: binary(), list())
    -> {'ok', Msg :: dnslib:message(), Trailing :: binary()}
     | {'error', 'too_short'}
     | {'error', error_type(), HeaderMsg :: dnsmsg:message()}.
----

Transform message to wire format.

== Types

=== error_type()

[source,erlang]
----
error_type() =
      {'format_error', {'invalid_domain', Reason :: term()}}
    | {'format_error', 'truncated_message'}
    | {'format_error', 'truncated_domain'}
    | {'format_error', {'invalid_question_class', Type :: dnsrr:type(), Class   :: dnsclass:class()}}
    | {'format_error', {'invalid_resource_class', Type :: dnsrr:type(), Class   :: dnsclass:class()}}
    | {'format_error', {'invalid_section',        Type :: dnsrr:type(), Section :: dnsmsg:message_section()}}
    | {'format_error', {'invalid_resource_data',  Type :: dnsrr:type(), Data    :: binary()}}
    | {'format_error', 'truncated_resource_data'}
    | {'edns_error',   'bad_version' | term()}.
----

== Arguments

Bin::

Binary which represents the message

== Return value

If the message could be parsed without errors, a tuple consisting of `'ok'`, the produced message and any trailing bytes in the binary is returned.

If there was an error in the message, a tuple consisting of `'error'` and the error reason is returned. If the error reason was not `'too_short'`, a message is also included in the returned tuple. If the parsed message was a request, A DNS server can then produce the response with link:dnsmsg.response{ext-relative}[`dnsmsg:response/1,2`] and send the resulting response to the client. The returned message includes only information from the message header. Ie. it does not contain any questions or resources from the message, even if the contents of the message were partially valid.

== Errors

`{'error', 'too_short'}`::

Message was shorter than a DNS message header (12 bytes).

`{'error', error_type(), Msg $$::$$ dnsmsg:message()}`::

An error was encountered in the message. `Msg` is a `dnsmsg:message()` message which is constructed from only the DNS header. It contains no questions or resources from the parsed message. If the parsed message was a request, `dnsmsg:response` can be used to produce a response with the correct return code.

== Error types

`{'format_error', {'invalid_domain', Reason $$::$$ term()}}`::

A domain in the message was invalid -- invalid label length, too long etc. `HeaderMsg` response return code is set to `'format_error'`.

`{'format_error', 'truncated_message'}`::

Message was cut short before all expected contents were successfully retrieved. `HeaderMsg` response return code is set to `'format_error'`.

`{'format_error', 'truncated_domain'}`::

Message was cut short before a valid domain termination was reached.  Basically a variant of `'truncated_message'`. `HeaderMsg` response return code is set to `'format_error'`.

`{'format_error', {'invalid_question_class', Type $$::$$ dnsrr:type(), Class $$::$$ dnsclass:class()}}`::

A question contained an invalid combination of class and type. Tuple contains the invalid combination. `HeaderMsg` response return code is set to `'format_error'`.

`{'format_error', {'invalid_resource_class', Type $$::$$ dnsrr:type(), Class $$::$$ dnsclass:class()}}`::

A resource contained an invalid combination of class and type. Tuple contains the invalid combination. `HeaderMsg` response return code is set to `'format_error'`.

`{'format_error', {'invalid_section', Type $$::$$ dnsrr:type(), Section $$::$$ dnsmsg:message_section()}}`::

A resource type was encountered in a section in which it is not allowed. Ie. `ALL` in resources or `OPT` anywhere other than in additional. `HeaderMsg` response return code is set to `'format_error'`.

`{'format_error', {'invalid_resource_data', Type $$::$$ dnsrr:type(), Data $$::$$ binary()}}`::

The data for a resource was invalid. Tuple contains the type and binary which produced the error. `HeaderMsg` response return code is set to `'format_error'`.

`{'format_error', 'truncated_resource_data'}`::

Message was cut short before all resource data could be retrieved. Basically a variant of `'truncated_message'`. `HeaderMsg` response return code is set to `'format_error'`.

`{'edns_error', 'bad_version' | 'multiple_opts' | 'invalid_data'}`::

There was an EDNS error in the message. `'bad_version'` means that the EDNS version was invalid, `'multiple_opts'` means that the message contained multiple `'opt'` resources and `'invalid_data'` means that one or more of the fields in the `'opt'` record were invalid. On `'bad_version'` error, `HeaderMsg` response return code is set to `'bad_version'`. Otherwise it is `'format_error'`.

== Examples

[source,erlang]
----
{ok, Msg, <<>>} = dnswire:from_binary(<<0:96>>).
----

== Changelog

* *0.0.2*
** Error format for errors other than `'too_short'` changed
** On errors (other than `'too_short'`), a response `dnsmsg:message()` with the correct return code set is now returned
** Add `{'edns_error', term()}` error type
* *0.0.0* Function added

== See also

link:dnswire.to_iolist{ext-relative}[dnswire:to_iolist],
link:dnswire.to_binary{ext-relative}[dnswire:to_binary],
link:dnswire{ext-relative}[dnswire]
