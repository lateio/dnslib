= dnswire:from_binary
Lauri Moisio <l@arv.io>
Version 0.0.1, 2019.01.18
:ext-relative: {outfilesuffix}

== Name

dnswire:from_binary - Parse message from wire format

== Description

[source,erlang]
----
from_binary(Bin :: binary()) -> from_binary(Msg, []).

from_binary(Bin :: binary(), list())
    -> {ok, Msg :: dnslib:message(), Trailing :: binary()}
     | {error,
           'too_short'
         | {'format_error', format_error_type(), dnsmsg:message()}.
       }.
----

Transform message to wire format.

== Types

=== format_error_type()

[source,erlang]
----
format_error_type() =
      {'invalid_domain', Reason :: term()}
    | 'truncated_message'
    | 'truncated_domain'
    | {'invalid_question_class', Type :: dnsrr:type(), Class   :: dnsclass:class()}
    | {'invalid_resource_class', Type :: dnsrr:type(), Class   :: dnsclass:class()}
    | {'invalid_section',        Type :: dnsrr:type(), Section :: dnsmsg:message_section()}
    | {'invalid_resource_data',  Type :: dnsrr:type(), Data    :: binary()}
    | 'truncated_resource_data'.
----

== Arguments

Bin::

Binary which represents the message

== Return value

If the message could be parsed without errors, a tuple consisting of `'ok'`, the produced message and any trailing bytes in the binary is returned.

If there was an error in the message, a tuple consisting of `'error'` and the error reason is returned. If the error reason was not `'too_short'`, a message consisting of the contents of the message header is also returned. This is done so that it is possible -- when a server receives a malformed request -- to send a response with return code `'format_error'` to the client.

== Errors

`'too_short'`::

Message was shorter than a DNS message header (12 bytes).

`{'format_error', format_error_type(), dnsmsg:message()}`::

An error was encountered in the message. Last member of the tuple is a `dnsmsg:message()` which is constructed from only the DNS header. It contains no questions or resources.

== Format errors

`{'invalid_domain', Reason $$::$$ term()}`::

A domain in the message was invalid -- invalid label length, too long etc.

`'truncated_message'`::

Message was cut short before all expected contents were successfully retrieved.

`'truncated_domain'`::

Message was cut short before a valid domain termination was reached.  Basically a variant of `'truncated_message'`.

`{'invalid_question_class', Type $$::$$ dnsrr:type(), Class $$::$$ dnsclass:class()}`::

A question contained an invalid combination of class and type. Tuple contains the invalid combination.

`{'invalid_resource_class', Type $$::$$ dnsrr:type(), Class $$::$$ dnsclass:class()}`::

A resource contained an invalid combination of class and type. Tuple contains the invalid combination.

`{'invalid_section', Type $$::$$ dnsrr:type(), Section $$::$$ dnsmsg:message_section()}`::

A resource type was encountered in a section in which it is not allowed. Ie. `ALL` in resources or `OPT` anywhere other than in additional.

`{'invalid_resource_data', Type $$::$$ dnsrr:type(), Data $$::$$ binary()}`::

The data for a resource was invalid. Tuple contains the type and binary which produced the error.

`'truncated_resource_data'`::

Message was cut short before all resource data could be retrieved. Basically a variant of `'truncated_message'`.

== Examples

[source,erlang]
----
{ok, Msg, <<>>} = dnswire:from_binary(<<0:96>>).
----

== Changelog

* *0.0.0* Function added

== See also

link:dnswire.to_iolist{ext-relative}[dnswire:to_iolist],
link:dnswire.to_binary{ext-relative}[dnswire:to_binary],
link:dnswire{ext-relative}[dnswire]
