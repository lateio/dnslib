= dnsfile:read_file
Lauri Moisio <l@arv.io>
Version 0.0.2, 2019.04.10
:ext-relative: {outfilesuffix}

== Name

dnsfile:read_file - Read resource records and other info from a file

== Description

[source,erlang]
----
-type read_file_error_type() ::
      'syntax_error'
    | 'directive_error'
    | 'resource_record_error'.

read_file(Path :: string())
    -> read_file(Path, []).

read_file(Path :: string(), Opts :: [read_file_opt()])
    -> {'ok', [dnsfile()]}
     | {'error'
           {'file_error', 'eacces' | 'enoent' | 'eisdir', Filename :: string()}
         | {
             read_file_error_type(),
             Filename :: string(),
             Line :: pos_integer(),
             Reason :: term()
           }
       }.
----

Read resource records and other info from a file. Somewhat like link:http://erlang.org/doc/man/file.html#read_file_info-1[`file:read_file_info/1`] of the standard library.

== Types

=== dnsfile()

[source,erlang]
----
-include_lib("dnslib/include/dnsfile.hrl").

dnsfile() = #dnsfile{
    resources     = [dnslib:resource()],
    path          = string(),
    included_from = string() | 'undefined'
}
----

=== read_file_opt()

[source,erlang]
consult_opt() =
    {'line_break', string()}
  | {'class', dnsrr:class() | 'explicit'}
  | {'type_blacklist', dnsrr:type() | [dnsrr:type()]}
  | {'domain', dnslib:domain()}
  | {'origin', dnslib:domain()}
  | {'ttl', dnslib:ttl()}
  | {'max_line_length', pos_integer()}
  | {'allow_unknown_resources', boolean()}
  | {'allow_unknown_classes', boolean()}
  | {'encoding', unicode:encoding()}
  | {'text_encoding', unicode:encoding()}.

The default value for each option -- when one exists -- is given in parentheses next to the option.

`{'line_break', string()}` (`"\n"`)::

When a line break is encountered in a quoted string, it is replaced with with this string. This option does not have any effect on what constitutes a line while the file is parsed.

`{'class', dnsrr:class() | 'explicit'}`::

When this option is provided, resources in the consulted file have to match the specified class, or a syntax error is returned. Alternatively, if the resources in the master file contain no explicit classes, the class specified in this option is used for all of them. Specifying `'explicit'` disables the default behavior of assuming that a master file without explicit classes is actually class `IN` but discarding with this assumption if the first resource record has an explicit class.

[NOTE]
Although the original DNS specification requires that the class of a master file be explicit, dnslib takes the position that master files with classes other than `IN` are rare enough that `IN` can be made the implicit class of master files. Other classes can still be used normally according to the original specification.

`{'type_blacklist', [dnsrr:type()]}`::

With this option, resource types can be blacklisted. If a blacklisted entry is encountered while parsing a file, an error is returned.

`{'domain', dnslib:domain()}`::

According to DNS master file syntax, if a resource record entry specifies no domain, the previous domain is used instead. This option sets that initial "previous domain". If a domain is encountered while handling a file, that new domain overrides this option.

`{'origin', dnslib:domain()}`::

Domains in master files can be either absolute or relative. An origin domain is appended to relative domains. Origin can be set with `$ORIGIN` directive in a master file or with this option. `$ORIGIN` directives in master files override this option.

`{'ttl', dnslib:ttl()}`::

If a resource record has no explicit time-to-live (ttl) field, the default ttl is used. This default ttl can be set with `$TTL` directive in a master file or with this option. `$TTL` directives in master files override this option.

`{'max_line_length', pos_integer()}` (`1024`)::

This option allows the maximum number of character per line to be adjusted. A line which exceeds the length limit will result in an error.

`{'allow_unknown_resources', boolean()}` (`'false'`)::

link:https://tools.ietf.org/rfc/rfc3597.txt[RFC3597] specifies a special syntax for unknown resource types. It allows, for example, an unknown resource type identified by integer value `10000` to be encoded in the master file as `"TYPE10000"` and allows the resource data to be stored as an opaque binary blob. This option controls whether or not these unknown resource types are allowed in a master file. If unknown resource types are not allowed and one is encountered, an error will be returned.

::

Do note however, that this option does not enable or disable the generic form when it comes to known resources. Ie, regardless of this option, a valid `A` record is accepted whether it is presented in the file as `"A"` or `"TYPE1"`.

`{'allow_unknown_classes', boolean()}` (`'false'`)::

link:https://tools.ietf.org/rfc/rfc3597.txt[RFC3597] specifies a special syntax for unknown resource classes. It allows, for example, an unknown class identified by integer value `10000` to be encoded in the master file as `"CLASS10000"`. This option controls whether or not these unknown classes are allowed in a master file. If unknown classes are not allowed and one is encountered, an error will be returned.

::

Do note however, that this option does not enable or disable the generic form when it comes to known classes. Ie, regardless of this option, a valid `IN` record is accepted whether it is presented in the file as `"IN"` or `"CLASS1"`.

`{'encoding', unicode:encoding()}` (`'unicode'`)::

`consult` accesses files via the standard Erlang `file` and `io` modules. This means that it is possible for `consult` to transparently handle a variety of character encodings. While most DNS master files will consist of 8-bit ASCII text, this option allows for the exceptions to handled when necessary. Use `'latin1'` in `'encoding'` and `'text_encoding'` for byte-to-byte passthrough.

`{'text_encoding', unicode:encoding()}` (`'unicode'`)::

`consult` accesses files via the standard Erlang `file` and `io` modules. This means that it is possible for `consult` to transparently handle a variety of character encodings. This option determines the encoding of the bytelist (`[byte()]`) which is passed to resource record modules requesting text data. See xref:dnsfile{ext-relative}#encoding[dnsfile - encoding] for further discussion. Use `'latin1'` in `'encoding'` and `'text_encoding'` for byte-to-byte passthrough.

== Arguments

Path::

Path of the master file

Opts::

Options to control certain aspects of master file handling

== Return value

On success a tuple consisting of `'ok'` atom and a list of records containing file details are returned. Records are in the order files were handled/included in. If an `$INCLUDE` directive causes another file to be included, the file containing the `$INCLUDE` directive is split into multiple records: first one contains the resources that appeared before the `$INCLUDE` directive and the second one contains the resources parsed after the directive. Resources in the records are in the same order as they appeared in the file.

On error a tuple consisting of `'error'` atom and the error reason is returned.

== Errors

`{'file_error', Reason, Filename $$::$$ string()}`::

`'file_error'` indicates problems with accessing the file -- insufficient permissions, file not actually existing, etc.

`{read_file_error_type(), File $$::$$ string(), Line $$::$$ pos_integer(), Reason $$::$$ term()}`::

This case covers a wide variety problems regarding file contents. In effort to be helpful, `File` and `Line`  are included to help guide debugging. `Reason` terms try to be informative.

== Notes

Currently `read_file` will not allow multiple classes to be present in a single master file.

== Examples

[source,erlang]
----
{ok, [
    #dnsfile{
        resources=[{[<<"arv">>,<<"io">>], a, in, 60, {127,0,0,1}}],
        included_from=undefined,
        path="/BleepBloop/treasures"
    }
]} = dnsfile:read_file("/BleepBloop/treasures"),

{ok, [
    #dnsfile{
        resources=[{[<<"before">>,<<"include">>], a, in, 60, {127,0,0,1}}],
        included_from=undefined,
        path="/BleepBloop/root"
    },
    #dnsfile{
        resources=[{[<<"include">>], a, in, 60, {127,0,0,1}}],
        included_from="/BleepBloop/root",
        path="/BleepBloop/include"
    },
    #dnsfile{
        resources=[{[<<"after">>,<<"include">>], a, in, 60, {127,0,0,1}}],
        included_from=undefined,
        path="/BleepBloop/root"
    }
]} = dnsfile:read_file("/BleepBloop/root").
----

== Changelog

* *0.0.2* Function added

== See also

link:dnsfile.consult{ext-relative}[dnsfile:consult],
link:dnsfile.write_resources{ext-relative}[dnsfile:write_resources],
link:dnsfile{ext-relative}[dnsfile]
