= dnsmsg:set_header
Lauri Moisio <l@arv.io>
Version 0.0.1, 2019.01.18
:ext-relative: {outfilesuffix}

== Name

dnsmsg:set_header - Modify message fields

== Description

[source,erlang]
----
set_header(Msg :: dnsmsg:message(), [{Key :: message_field(), Value :: term()}])
    -> dnsmsg:message().

set_header(
  Msg :: dnsmsg:message(),
  Field :: message_field(),
  Value :: term())
    -> dnsmsg:message().
----

Modify message fields.

== Types

=== message_field()

[source,erlang]
----
message_field() =
      'id'
    | 'opcode'
    | 'return_code'
    | 'authoritative'
    | 'truncated'
    | 'recursion_desired'
    | 'recursion_available'
    | 'authenticated_data'
    | 'checking_disabled'.
----

Each key requires a value of a certain type, which is given in parentheses next to the key.

`'id'` (`0..16#FFFF`)::

Set the id of a message.

`'opcode'` (`dnslib:opcode() | 0..16#F`)::

Set the opcode of a message.

`'return_code'` (`dnslib:return_code() | 0..16#FFF`)::

Set the return code of a message.

`'authoritative'` (`boolean()`)::

Indicates whether the resources in a message are from an authoritative source (eg. not cached).

`'truncated'` (`boolean()`)::

`'true'` indicates that not all available resources could fit in the response and the client should try again with TCP transport.

`'recursion_desired'` (`boolean()`)::

When `'true'` in a request, indicates that the receiving server -- if willing -- should perform a recursive query to resolve questions present in the message.

`'recursion_available'` (`boolean()`)::

When `'true'` in a response, indicates that the server is willing to perform recursive queries.

`'authenticated_data'` (`boolean()`)::

TBD. DNSSEC related.

`'checking_disabled'` (`boolean()`)::

TBD. DNSSEC related.

== Arguments

Msg::

Message in which the field(s) will be modified

Field::

Field to modify

Value::

Value to which the field will be set to

== Return value

The message containing the newly set field(s) will be returned.

Supplying the wrong type of value for a field will crash the application.

== Examples

[source,erlang]
----
Msg0 = dnsmsg:new(),
#{'ID' := 0} = dnsmsg:set_header(Msg0, id, 0).
----

== Changelog

* *0.0.0* Function added

== See also

link:dnsmsg{ext-relative}[dnsmsg]
